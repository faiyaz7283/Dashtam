"""Initial database schema with timezone-aware datetimes

Revision ID: bce8c437167b
Revises:
Create Date: 2025-10-03 21:49:21.068284+00:00

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "bce8c437167b"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("last_login", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "providers",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("provider_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("alias", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("provider_metadata", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "alias", name="unique_user_provider_alias"),
    )
    op.create_index(op.f("ix_providers_id"), "providers", ["id"], unique=False)
    op.create_index(
        op.f("ix_providers_provider_key"), "providers", ["provider_key"], unique=False
    )
    op.create_index(
        op.f("ix_providers_user_id"), "providers", ["user_id"], unique=False
    )
    op.create_table(
        "provider_connections",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("provider_id", sa.Uuid(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "EXPIRED",
                "REVOKED",
                "ERROR",
                "PENDING",
                name="providerstatus",
            ),
            nullable=False,
        ),
        sa.Column("connected_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("last_sync_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("next_sync_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("sync_frequency_minutes", sa.Integer(), nullable=False),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("error_count", sa.Integer(), nullable=False),
        sa.Column("accounts_count", sa.Integer(), nullable=False),
        sa.Column("accounts_list", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["providers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_provider_connections_id"), "provider_connections", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_provider_connections_next_sync_at"),
        "provider_connections",
        ["next_sync_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_provider_connections_provider_id"),
        "provider_connections",
        ["provider_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_provider_connections_status"),
        "provider_connections",
        ["status"],
        unique=False,
    )
    op.create_table(
        "provider_audit_logs",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("connection_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("action", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("details", sa.JSON(), nullable=True),
        sa.Column("ip_address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("user_agent", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["connection_id"],
            ["provider_connections.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_provider_audit_logs_action"),
        "provider_audit_logs",
        ["action"],
        unique=False,
    )
    op.create_index(
        op.f("ix_provider_audit_logs_connection_id"),
        "provider_audit_logs",
        ["connection_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_provider_audit_logs_id"), "provider_audit_logs", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_provider_audit_logs_user_id"),
        "provider_audit_logs",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "provider_tokens",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("connection_id", sa.Uuid(), nullable=False),
        sa.Column("access_token_encrypted", sa.Text(), nullable=True),
        sa.Column("refresh_token_encrypted", sa.Text(), nullable=True),
        sa.Column("id_token", sa.Text(), nullable=True),
        sa.Column("token_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("scope", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("last_refreshed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("refresh_count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["connection_id"],
            ["provider_connections.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_provider_tokens_connection_id"),
        "provider_tokens",
        ["connection_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_provider_tokens_expires_at"),
        "provider_tokens",
        ["expires_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_provider_tokens_id"), "provider_tokens", ["id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_provider_tokens_id"), table_name="provider_tokens")
    op.drop_index(op.f("ix_provider_tokens_expires_at"), table_name="provider_tokens")
    op.drop_index(
        op.f("ix_provider_tokens_connection_id"), table_name="provider_tokens"
    )
    op.drop_table("provider_tokens")
    op.drop_index(
        op.f("ix_provider_audit_logs_user_id"), table_name="provider_audit_logs"
    )
    op.drop_index(op.f("ix_provider_audit_logs_id"), table_name="provider_audit_logs")
    op.drop_index(
        op.f("ix_provider_audit_logs_connection_id"), table_name="provider_audit_logs"
    )
    op.drop_index(
        op.f("ix_provider_audit_logs_action"), table_name="provider_audit_logs"
    )
    op.drop_table("provider_audit_logs")
    op.drop_index(
        op.f("ix_provider_connections_status"), table_name="provider_connections"
    )
    op.drop_index(
        op.f("ix_provider_connections_provider_id"), table_name="provider_connections"
    )
    op.drop_index(
        op.f("ix_provider_connections_next_sync_at"), table_name="provider_connections"
    )
    op.drop_index(op.f("ix_provider_connections_id"), table_name="provider_connections")
    op.drop_table("provider_connections")
    op.drop_index(op.f("ix_providers_user_id"), table_name="providers")
    op.drop_index(op.f("ix_providers_provider_key"), table_name="providers")
    op.drop_index(op.f("ix_providers_id"), table_name="providers")
    op.drop_table("providers")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
