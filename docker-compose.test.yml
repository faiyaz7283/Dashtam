# Docker Compose for Testing Environment (Standalone)
# This is a completely isolated test environment that runs in parallel with development
name: dashtam-test
# 
# Key differences from development:
# - Different container names with -test suffix
# - Different ports (8001, 5433, 6380, 8183) to avoid conflicts
# - Ephemeral storage (tmpfs) for faster tests and clean state
# - Separate network (dashtam-test-network)
# - Test database with test user
#
# Usage:
#   docker compose -f docker-compose.test.yml --env-file .env.test up -d
#   docker compose -f docker-compose.test.yml exec app pytest
#   docker compose -f docker-compose.test.yml down

services:
  # PostgreSQL Database (Testing) - Ephemeral storage
  postgres:
    image: postgres:17.6-alpine3.22
    container_name: dashtam-test-postgres
    environment:
      POSTGRES_DB: ${TEST_POSTGRES_DB:-dashtam_test}
      POSTGRES_USER: ${TEST_POSTGRES_USER:-dashtam_test_user}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD:-test_password}
    ports:
      - "5433:5432"  # Different external port to avoid conflict with dev
    tmpfs:
      # Use tmpfs for ephemeral storage - faster and ensures clean state
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_POSTGRES_USER:-dashtam_test_user}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - dashtam-test-network

  # Redis Cache (Testing) - Ephemeral storage
  redis:
    image: redis:8.2.1-alpine3.22
    container_name: dashtam-test-redis
    ports:
      - "6380:6379"  # Different external port
    tmpfs:
      # Ephemeral storage for test cache
      - /data
    command: redis-server --appendonly no  # Disable persistence for tests
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - dashtam-test-network

  # Main Application (Testing)
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    container_name: dashtam-test-app
    environment:
      DATABASE_URL: postgresql+asyncpg://${TEST_POSTGRES_USER:-dashtam_test_user}:${TEST_POSTGRES_PASSWORD:-test_password}@postgres:5432/${TEST_POSTGRES_DB:-dashtam_test}
      REDIS_URL: redis://redis:6379/1  # Use DB 1 for tests
      SECRET_KEY: ${SECRET_KEY:-test-secret-key-for-automated-testing-only}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-test-encryption-key-32-chars-long}
      ENVIRONMENT: testing
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      API_BASE_URL: http://localhost:8001
      CALLBACK_BASE_URL: http://127.0.0.1:8183
      TESTING: "true"
      DISABLE_EXTERNAL_CALLS: "true"
      MOCK_PROVIDERS: "true"
    ports:
      - "8001:8000"  # Different external port (8001), internal stays 8000
    volumes:
      - ./src:/app/src:rw
      - ./tests:/app/tests:rw
      - ./alembic:/app/alembic:rw
      - ./alembic.ini:/app/alembic.ini:rw
      - ./certs:/app/certs:ro
      - ./.env.test:/app/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dashtam-test-network
    # Keep container running for on-demand test execution
    # Run migrations first, then keep container alive
    command: >
      sh -c "
        echo 'Initializing test database with Alembic migrations...' &&
        uv run alembic upgrade head &&
        echo 'Test environment ready. Database and Redis are available.' &&
        echo 'Run tests with: docker compose -f docker-compose.test.yml exec app pytest' &&
        tail -f /dev/null
      "

  # OAuth Callback Server (Testing)
  callback:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: callback
    container_name: dashtam-test-callback
    environment:
      API_BASE_URL: http://app:8000
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8183:8182"  # Different external port
    volumes:
      - ./certs:/app/certs:ro
    depends_on:
      - app
    networks:
      - dashtam-test-network
    command: >
      sh -c "
        echo 'Test callback server ready.' &&
        tail -f /dev/null
      "


networks:
  dashtam-test-network:
    driver: bridge

# Note: No named volumes - all storage is ephemeral via tmpfs
# This ensures tests always start with a clean state
