# Docker Compose override for testing environment
# Usage: docker-compose -f docker-compose.yml -f docker-compose.test.yml exec app pytest
#
# This file overrides the main docker-compose.yml to create an isolated test environment
# with separate database user, database, and test-specific configurations.
# All values are loaded from .env.test file per project rules.

services:
  # Test-specific PostgreSQL with test database
  postgres:
    environment:
      # Override with test database credentials from .env.test
      POSTGRES_DB: ${TEST_POSTGRES_DB}
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      TEST_POSTGRES_DB: ${TEST_POSTGRES_DB}
      TEST_POSTGRES_USER: ${TEST_POSTGRES_USER}
      TEST_POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
    volumes:
      # Mount test initialization script
      - ./docker/init-test-db.sh:/docker-entrypoint-initdb.d/init-test-db.sh:ro

  # Application with test configuration
  app:
    # Override command to keep container running without auto-starting the app
    # This allows us to run test-specific initialization and tests on demand
    command: sleep infinity
    # Override environment variables from main docker-compose.yml
    environment:
      DATABASE_URL: postgresql+asyncpg://${TEST_POSTGRES_USER}:${TEST_POSTGRES_PASSWORD}@postgres:5432/${TEST_POSTGRES_DB}
      REDIS_URL: redis://redis:6379/1
      ENVIRONMENT: testing
    # Mount .env.test as .env so Pydantic loads it directly
    # This ensures all environment variables are read from the test config file
    volumes:
      - ./src:/app/src:rw
      - ./tests:/app/tests:rw
      - ./alembic:/app/alembic:rw
      - ./certs:/app/certs:ro
      - ./.env.test:/app/.env:ro  # Mount .env.test as .env for proper Pydantic loading
